# ===================================================================
# CONFIGURA��O DA CONEX�O COM O BANCO DE DADOS (POSTGRESQL)
# ===================================================================
# URL de conex�o para o PostgreSQL. Altere o host (localhost) e o nome do banco (bellory_db) se necess�rio.
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=root
# A propriedade 'driver-class-name' n�o � mais necess�ria. O Spring Boot detecta o driver do PostgreSQL automaticamente.

# ===================================================================
# CONFIGURA��O DO POOL DE CONEX�ES (HIKARI CP)
# ===================================================================
# Define o tamanho m�ximo do pool de conex�es.
# O valor foi ajustado para 20, que � mais seguro e eficiente para a maioria das aplica��es
# do que o valor anterior de 100, evitando esgotar as conex�es do banco.
spring.datasource.hikari.maximum-pool-size=20

# ===================================================================
# CONFIGURA��O DO JPA E HIBERNATE
# ===================================================================
# Exibe o SQL gerado pelo Hibernate no console. �timo para debug em ambiente de desenvolvimento.
spring.jpa.properties.hibernate.show_sql=true
# Formata o SQL exibido para facilitar a leitura.
spring.jpa.properties.hibernate.format_sql=true
# Define o dialeto espec�fico do PostgreSQL. Ajuda o Hibernate a gerar o SQL mais otimizado.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# IMPORTANTE: Gerenciamento do schema do banco de dados (DDL - Data Definition Language)
# 'update': O Hibernate tenta atualizar o schema do banco com base nas suas entidades.
#           Use apenas em desenvolvimento. NUNCA em produ��o, pois pode levar � perda de dados.
# 'validate': Em produ��o, use 'validate' para verificar se o schema do banco corresponde �s entidades.
# 'none': Desabilita o gerenciamento autom�tico. � a op��o mais segura para produ��o.
# RECOMENDA��O PARA PRODU��O: Use uma ferramenta de migration como Flyway ou Liquibase.
spring.jpa.hibernate.ddl-auto=create-drop

#teste
# ===================================================================
# CONFIGURA��O DE SEGURAN�A (OAUTH2 RESOURCE SERVER COM JWT)
# ===================================================================
# As propriedades antigas 'security.oauth2.*' e 'security.jwt.signing-key' foram removidas, pois s�o obsoletas.
# A seguir est� a forma moderna de configurar a valida��o de um token JWT usando uma chave sim�trica.

# Esta � a nova propriedade para definir a chave secreta usada para assinar e validar os tokens JWT.
# O valor deve ser a sua chave secreta original, n�o em Base64, e com pelo menos 256 bits (32 bytes) para ser segura.
# O valor "Bianca meu melhor amor" (sua chave antiga decodificada) � inseguro.
# Use um gerador de chaves seguras para criar uma nova chave para produ��o.
security.jwt.signing-key=b968dd5d61d08414bce019ab28d188074a0ff71c0c12271e5fcd24b0a830939a

# Se voc� estivesse validando tokens de um provedor de identidade externo (como Keycloak, Auth0, etc.),
# voc� usaria a propriedade abaixo em vez da 'secret-key'.
# spring.security.oauth2.resourceserver.jwt.issuer-uri=http://seu-provedor-de-identidade/auth/realms/seu-realm

