# Versão do Docker Compose
#version: '3.8'

# Definição dos nossos serviços (contêineres)
services:
  # 1. Serviço do Banco de Dados PostgreSQL
  db:
    image: postgres:15-alpine  # Usa uma imagem oficial e leve do Postgres
    container_name: bellory_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=bellory
    ports:
      - "5432:5432" # Mapeia a porta do container para a porta da sua máquina
    volumes:
      - postgres-data:/var/lib/postgresql/data # Garante que os dados persistam

  # 2. Serviço da nossa API Bellory
  app:
    build: .  # Constrói a imagem a partir do Dockerfile no diretório atual
    container_name: bellory_api
    depends_on:
      - db      # Diz ao Docker para esperar o serviço 'db' estar pronto antes de iniciar o 'app'
    ports:
      - "8080:8080" # Mapeia a porta 8080 do container para a 8080 da sua máquina
    environment:
      # Configurações para a API se conectar ao serviço 'db'
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop # 'update' é bom para desenvolvimento
      - SECURITY_JWT_SIGNING_KEY=b968dd5d61d08414bce019ab28d188074a0ff71c388e1fb5

# Define um volume nomeado para persistir os dados do banco
volumes:
  postgres-data:
