# Versão do Docker Compose
#version: '3.8'

# Definição dos nossos serviços (contêineres)
#services:
#  # 1. Serviço do Banco de Dados PostgreSQL
#  db:
#    image: postgres:15-alpine  # Usa uma imagem oficial e leve do Postgres
#    container_name: bellory_db
#    environment:
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=root
#      - POSTGRES_DB=bellory
#    ports:
#      - "5432:5432" # Mapeia a porta do container para a porta da sua máquina
#    volumes:
#      - postgres-data:/var/lib/postgresql/data # Garante que os dados persistam


  # 2. Serviço da nossa API Bellory
#  app:
#    build: .
#    container_name: bellory_api
#    depends_on:
#      - db
#    ports:
#      - "8080:8080"
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres
#      - SPRING_DATASOURCE_USERNAME=postgres
#      - SPRING_DATASOURCE_PASSWORD=root
#      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
#      - SECURITY_JWT_SIGNING_KEY=b968dd5d61d08414bce019ab28d188074a0ff71c388e1fb5

# Define um volume nomeado para persistir os dados do banco
#volumes:
#  postgres-data:


services:
  # Serviço da nossa API Bellory
  app:
    build: .
    container_name: bellory_api
    ports:
      - "8080:8080"
    # Adiciona a rede do host para permitir a conexão com 'host.docker.internal'
    # Em Linux, isso é geralmente necessário.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      # ATIVA O PERFIL DE PRODUÇÃO
      - SPRING_PROFILES_ACTIVE=prod

      # PASSA AS CREDENCIAIS DO BANCO DE DADOS DE FORMA SEGURA
      # (Você deve configurar essas variáveis nos Secrets do seu repositório no GitHub
      # e depois passá-las para o seu servidor)
      - DB_USER=${DB_PROD_USER}
      - DB_PASS=${DB_PROD_PASSWORD}

      # Você pode passar outras variáveis de ambiente aqui se necessário
      - SECURITY_JWT_SIGNING_KEY=${SECURITY_JWT_SECRET}
