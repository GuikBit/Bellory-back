name: CI/CD API - Spring Boot (DEV)

on:
  push:
    branches:
      - dev

jobs:
  build_and_deploy:
    name: Build & Deploy API (DEV)
    runs-on: self-hosted

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Adicionar servidor aos Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Build no Servidor Remoto
        run: |
          REPO_URL="git@github.com:GuikBit/Bellory-back.git"
          TARGET_DIR="/var/runner/api-dev"

          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e

            if [ -d "$TARGET_DIR/.git" ]; then
              echo "--- Repositório existe. Atualizando..."
              cd "$TARGET_DIR"
              git checkout dev
              git pull origin dev
            else
              echo "--- Clonando repositório..."
              mkdir -p "$(dirname "$TARGET_DIR")"
              git clone -b dev "$REPO_URL" "$TARGET_DIR"
              cd "$TARGET_DIR"
            fi

            echo "--- Iniciando build Maven..."
            mvn clean package -DskipTests
          EOF

      - name: Deploy e Reinício do Serviço (DEV)
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e
            echo "--- Preparando a pasta de desenvolvimento..."

            # Garante que a pasta de desenvolvimento exista
            mkdir -p /opt/api-dev

            # Apaga APENAS os arquivos antigos que serão substituídos, preservando o .env
            rm -f /opt/api-dev/docker-compose-dev.yml /opt/api-dev/Dockerfile /opt/api-dev/*.jar

            # Copia os arquivos novos do build
            cp /var/runner/api-dev/docker-compose-dev.yml /opt/api-dev/
            cp /var/runner/api-dev/Dockerfile /opt/api-dev/
            cp /var/runner/api-dev/target/*.jar /opt/api-dev/Bellory-1.0-SNAPSHOT.jar

            # Reinicia os containers usando o docker-compose-dev.yml
            cd /opt/api-dev
            docker system prune -f
            docker compose -f docker-compose-dev.yml down
            docker compose -f docker-compose-dev.yml up -d --build

            echo "--- Deploy de DEV concluído com sucesso!"
          EOF
