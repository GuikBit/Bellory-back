name: CI/CD API - Spring Boot

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    name: Build & Deploy API
    runs-on: self-hosted
    #environment: production

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # 1. CARREGA A CHAVE SSH NO AGENTE (PRÁTICA SEGURA!)
      - name: Configurar SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Adicionar servidor aos Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Build no Servidor Remoto
        run: |
          REPO_URL="git@github.com:GuikBit/Bellory-back.git"
          TARGET_DIR="/var/runner/api"

          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e

            if [ -d "$TARGET_DIR/.git" ]; then
              echo "--- Repositório existe. Atualizando..."
              cd "$TARGET_DIR"
              git checkout main
              git pull origin main
            else
              echo "--- Clonando repositório..."
              mkdir -p "$(dirname "$TARGET_DIR")"
              git clone -b main "$REPO_URL" "$TARGET_DIR"
              cd "$TARGET_DIR"
            fi

            echo "--- Iniciando build Maven..."
            mvn clean package -DskipTests
          EOF

      - name: Deploy e Reinício do Serviço
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e
            echo "--- Preparando a pasta de produção..."

            # Limpa e recria a pasta de deploy
            rm -rf /opt/api
            mkdir -p /opt/api

            # Copia arquivos do build
            cp /var/runner/api/docker-compose.yml /opt/api/
            cp /var/runner/api/Dockerfile /opt/api/
            cp /var/runner/api/target/*.jar /opt/api/

            # Reinicia containers
            cd /opt/api
            docker compose down || true
            docker system prune -f
            docker compose up -d --build

            echo "--- Deploy concluído com sucesso!"
          EOF
